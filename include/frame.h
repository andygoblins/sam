/* Copyright (c) 1998 Lucent Technologies - All rights reserved. */

/* libframe supports frames of editable text displayed in a single font.
 * Frames fold long lines and have fixed intervals for tabs.
 *
 * Frames only display visible text. Usually, programs will keep
 * a ful copy of the text in the window and pass pieces of this
 * text to the Frame for display.
 * For example, after calling frdelete, the program could check
 * maxlines, nlines, and lastlinefull and append more text
 * at the end of the Frame if necessary.
 */

typedef struct Frbox Frbox;
typedef struct Frame Frame;

/* Frbox is an internal type not used by the interface */
struct Frbox
{
    int64_t        wid;        /* in pixels */
    int64_t        nrune;      /* <0 ==> negate and treat as break char */
    union{
        uint8_t   *ptr;
        struct{
            int16_t   bc; /* break char */
            int16_t   minwid;
        } b;
    } a;
};

/* Frame is a window of editable text.
 *
 * p0 and p1 may be changed; call frselectp after changing
 * to maintain a consistent display.
 * maxtab may be changed before adding text to the Frame.
 * The library maintains all other elements; do not edit directly.
 */
struct Frame
{
    /* note that we track background color, but not foreground
     * this is because the foreground color is the same for all frames
     */
    uint64_t    bg;           /* background color */
    XftFont     *font;        /* of chars in the frame */
    Bitmap      *b;           /* on which frame appears */
    Rectangle   r;            /* in which text appears */
    Rectangle   entire;       /* of full frame */
    Frbox       *box;
    uint64_t    p0, p1;       /* selection */
    int16_t     left;         /* left edge of text */
    uint16_t    nbox, nalloc;
    uint16_t    maxtab;       /* max size of tab, in pixels */
    uint16_t    fheight;      /* font height, in pixels */
    uint16_t    nchars;       /* # runes in frame */
    uint16_t    nlines;       /* # lines with text */
    uint16_t    maxlines;     /* total # lines in frame */
    bool        lastlinefull; /* last line fills frame */
    bool        modified;     /* changed since frselect() */
};

/* frcharofpt returns the index of the closest character to the given Point.
 * The "closest" character is the one whose upper-left corner is up and
 * to the left of p.
 */
uint64_t   frcharofpt(Frame*, Point p);

/* frptofchar returns the location of the upper-left corner of the p'th
 * character, starting from 0. If the Frame holds less than p characters,
 * it returns the location of the upper-right corner of the last character
 * in the Frame.
 */
Point   frptofchar(Frame*, uint64_t p);

/* frdelete removes characters from the Frame between p0 and p1.
 * p1 points to the first character beyond the deletion.
 */
int frdelete(Frame*, uint64_t p0, uint64_t p1);

/* frinsert puts characters between sp and ep into the Frame
 * starting at p0.
 * Do not insert NULL, or you will have a bad day. Tabs and newlines
 * are rendered as whitespace, all other characters are just displayed.
 */
void    frinsert(Frame*, wchar_t* sp, wchar_t* ep, uint64_t p0);

/* frselect tracks the mouse to select a string of text in the Frame.
 * Returns when the mouse button state changes and sets f->p0
 * and f->p1 to the selected range of text.
 * This function assumes mouse button 1 is pressed down when called.
 */
void    frselect(Frame*, Mouse*);

/* frselectp selects a string of text based on f->p0 and f->p1 */
void    frselectp(Frame* f, Fcode);

/* frselectf selects a string based on the points. It assumes that
 * the points were generated by frptofchar.
 * You probably want to call frselectp instead.
 */
void    frselectf(Frame*, Point, Point, Fcode);

/* frinit prepares the Frame to draw characters. It sets maxtab
 * to 8x the width of a '0' character in the given font,
 * and calls frsetrects to initialize the geometry for the Frame.
 *
 * Rectangle defines the geometry of the Frame.
 * Bitmap is where the Frame will render. Bitmap can be null.
 */
void    frinit(Frame*, Rectangle, XftFont*, Bitmap*, uint64_t);

/* frsetercts sets the Frame geometry and calculates maxlines
 * based on the font height.
 */
void    frsetrects(Frame*, Rectangle, Bitmap*);

/* frclear frees the internal structures associated with the Frame,
 * but does not clear the display. The associated font and Bitmap
 * must be freed separately.
 * Applications can subsequently call frinit or frsetrects on the Frame.
 * For example, to resize a frame, first call frclear, then frinit and frinsert.
 */
void    frclear(Frame*);

void    frgetmouse(void);

uint8_t   *_frallocstr(unsigned);
void    _frinsure(Frame*, int, unsigned);
Point   _frdraw(Frame*, Point);
void    _frgrowbox(Frame*, int);
void    _frfreebox(Frame*, int, int);
void    _frmergebox(Frame*, int);
void    _frdelbox(Frame*, int, int);
void    _frsplitbox(Frame*, int, int);
int _frfindbox(Frame*, int, uint64_t, uint64_t);
void    _frclosebox(Frame*, int, int);
int _frcanfit(Frame*, Point, Frbox*);
void    _frcklinewrap(Frame*, Point*, Frbox*);
void    _frcklinewrap0(Frame*, Point*, Frbox*);
void    _fradvance(Frame*, Point*, Frbox*);
int _frnewwid(Frame*, Point, Frbox*);
void    _frclean(Frame*, Point, int, int);
void    _frredraw(Frame*, Point);
void    _fraddbox(Frame*, int, int);
Point   _frptofcharptb(Frame*, uint64_t, Point, int);
Point   _frptofcharnb(Frame*, uint64_t, int);
int _frstrlen(Frame*, int);

extern int tabwidth;

#define NRUNE(b)    ((b)->nrune<0? 1 : (b)->nrune)
#define NBYTE(b)    strlen((char*)(b)->a.ptr)
